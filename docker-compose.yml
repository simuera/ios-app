services:
  postgres:
    image: postgres:15-alpine
    container_name: tasktool_db
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - appnet
    # do not bind to host port to avoid conflicts on developer machines
    # ports:
    #  - "5433:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data

  redis:
    image: redis:7-alpine
    container_name: tasktool_cache
    restart: unless-stopped
    # do not bind Redis to host port by default to avoid port conflicts on developer machines.
    # If you need host access, add a docker-compose.override.yml that maps a host port.
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - appnet

  api:
    build: .
    container_name: tasktool_api
    restart: unless-stopped
    ports:
      - "3000:3000"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - appnet
    environment:
      # Use internal container hostnames so services talk to each other in compose.
      # These values intentionally prefer the docker network, not the developer host.
      DATABASE_URL: "postgresql://tasktool:password@postgres:5432/tasktool"
      DATABASE_REPLICA_URL: ""
      REDIS_URL: "redis://redis:6379"
      JWT_SECRET: ${JWT_SECRET}
      PORT: ${PORT:-3000}
      NODE_ENV: production
    depends_on:
      - postgres
      - redis

  worker:
    build: .
    container_name: tasktool_worker
    command: ["node", "dist/worker.js"]
    restart: unless-stopped
    environment:
      REDIS_URL: "redis://redis:6379"
      DATABASE_URL: "postgresql://tasktool:password@postgres:5432/tasktool"
      NODE_ENV: production
    depends_on:
      - redis
      - postgres
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    networks:
      - appnet

volumes:
  pgdata:

networks:
  appnet:
    driver: bridge
