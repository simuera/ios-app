import express from 'express';
import helmet from 'helmet';
import cors from 'cors';
import morgan from 'morgan';
import compression from 'compression';
import authRoutes from './api/auth/controller';
import userRoutes from './api/user/controller';
import tagRoutes from './api/tagScan/controller';
import { requestIdMiddleware } from './middleware/requestIdMiddleware';
import { errorHandler } from './middleware/errorHandler';
import { apiLimiter } from './middleware/rateLimiter';
import { metricsMiddleware, metricsHandler } from './middleware/metricsMiddleware';
import { logger } from './lib/logger';
import healthRoutes from './api/health/controller';
const app = express();
app.use(helmet());
app.use(cors({ origin: false }));
app.use(express.json({ limit: '1mb' }));
app.use(express.urlencoded({ extended: true }));
app.use(compression());
app.use(requestIdMiddleware);
app.use(apiLimiter);
app.use(metricsMiddleware);
app.use((req, res, next) => { (req as any).logger = logger; next(); });
app.use(morgan('combined', { stream: { write: (msg) => logger.info(msg.trim()) } }));
app.use('/api/auth', authRoutes);
app.use('/api/users', userRoutes);
app.use('/api/tag-scans', tagRoutes);
app.get('/metrics', metricsHandler);
app.use('/api/health', healthRoutes);
app.use(errorHandler);
export default app;
